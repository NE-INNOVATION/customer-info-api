# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Customer Info - Node.js CI

on:
  push:
    branches: [ dev, main ]
    paths-ignore:
      - 'configurations/**'

env:
  resourceGroup1: ${{ github.run_number }}
  resourceGroup2: ${{ github.run_number-1 }}
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  
  
  
jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ secrets.ACCESS_TOKEN }}
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        repository: NE-INNOVATION/customer-info-api
    
    - name: Extract branch name
      shell: bash
      run: |
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo "##[set-output name=sha_short;]$(echo $(git rev-parse --short HEAD))"
      id: extract_branch
    - name: Set Constants
      id: consts
      run: |
        echo ::set-output name=repo::$(echo ${GITHUB_REPOSITORY})
        echo ::set-output name=sha_short::$(git rev-parse --short HEAD)
        echo ::set-output name=image-name::$(echo quay.io/neinnovationorg/customer-info-api})
        echo ::set-output name=branch::${GITHUB_REF#refs/heads/}
        echo ::set-output name=docker_repo::$(echo /neinnovationorg/customer-info-api)
        echo ::set-env name=resourceGroup2::$(($resourceGroup1-1))
        
        echo ${{ env.resourceGroup1 }}
    - run: echo $resourceGroup1
    - run: echo $resourceGroup2



#    - name: Login to Podman
#      id: login
#      run:  |
#         echo ${{ steps.extract_branch.outputs.branch }}
#         echo ${{ steps.extract_branch.outputs.sha_short }}
#         podman login quay.io -u ${{ secrets.docker_username }} -p ${{ secrets.docker_password }}
#    - name: Build Image using Podman
#      run: |
#         podman build . -t quay.io/neinnovationorg/customer-info-api:${{ steps.extract_branch.outputs.branch }}-${{ env.resourceGroup1 }} --cgroup-manager=cgroupfs
#    - name: Push Image to Quay Registry
#      run: |
#          podman push quay.io/neinnovationorg/customer-info-api:${{ steps.extract_branch.outputs.branch }}-${{ env.resourceGroup1 }}

    - name: Find and Replace Tag in same the Repository
      shell: bash
      run:  |
         sed -i 's/${{ steps.extract_branch.outputs.branch }}-${{ env.resourceGroup2 }}/${{ steps.extract_branch.outputs.branch }}-${{ env.resourceGroup1 }}/g' configurations/deploymentConfig.yml
         git config --global user.email "parimalpatel123@gmail.com"
         git config --global user.name "parimalpate123"
         git add .
         git commit -m "update image tag"
         git fetch origin dev
         git push origin HEAD:dev

        
    - name: Create Pull request for config Repository
      shell: bash
      run:  |
         mkdir tempsampleapp1
         cd tempsampleapp1
         git config --global user.email "parimalpatel123@gmail.com"
         git config --global user.name "parimalpate123"
         echo "remote operations"
         git clone -b dev https://parimalpate123:${{ secrets.GITHUB_TOKEN }}@github.com/NE-INNOVATION/customer-info-api.git
         cd ..
         mkdir tempsampleappconfig1
         cd tempsampleappconfig1
         
    - name: Checkout config repo
      uses: actions/checkout@v2
      with:
        repository: NE-INNOVATION/customer-info-api-config
        token: ${{ secrets.ACCESS_TOKEN }} # `GitHub_PAT` is a secret that contains your PAT

    - name: Create Pull request for config Repository
      shell: bash
      run:  |
        pwd
        ls
        git config --global user.email "parimalpatel123@gmail.com"
        git config --global user.name "parimalpate123"
        pwd
        ls -a
        

         

                  


#    - name: Pull Image tag 
#      run: |
#          podman pull quay.io/neinnovationorg/customer-info-api:${{ steps.extract_branch.outputs.branch }}-${{ env.resourceGroup1 }}
#    - name: OpenShift Action
#      uses: redhat-developer/openshift-actions@v2.0
#      with:
#        # The URL of the Openshift cluster
#        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
#        # JSON with values to connect to the Openshift cluster
#        parameters: '{"username": "${{ secrets.OPENSHIFT_USER }}", "acceptUntrustedCerts": "true", "password":"${{ secrets.OPENSHIFT_PASSWORD }}"}'
#        # Oc command to be executed
#        cmd: |
#          'version'
#          'project development'
#          'tag --source=docker quay.io/neinnovationorg/customer-info-api:${{ steps.extract_branch.outputs.branch }} development/customer-info-api:${{ steps.extract_branch.outputs.branch }}'
    - name: Scan Image
      uses: Azure/container-scan@v0
      continue-on-error: true
      with:
        image-name: quay.io/neinnovationorg/customer-info-api:${{ steps.extract_branch.outputs.branch }}-${{ env.resourceGroup1 }}
        username: ${{ secrets.docker_username }}
        password: ${{ secrets.docker_password }}
        token: ${{ github.token }}
        severity-threshold: HIGH
        run-quality-checks: false
